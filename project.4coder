version(1);
project_name = "4coder";
patterns = {
"*.c",
"*.cpp",
"*.h",
"*.m",
"*.bat",
"*.sh",
"*.4coder",
"*.txt",
};
blacklist_patterns = {
".*",
};
load_paths_only = {
 {"."},
};
load_paths = {
 { load_paths_only, .os = "win"  },
 { load_paths_only, .os = "linux"},
 { load_paths_only, .os = "mac"  },
};

build_x86_win32 = "echo build: x86 & build.bat /DDEV_BUILD_X86";
build_x86_linux = "echo build: x86 & ./build.sh -DDEV_BUILD_X86";
build_x86_mac   = "echo build: x86 & ./build.sh -DDEV_BUILD_X86";

command_list = {
 { .name = "build x64",
   .out = "*compilation*", .footer_panel = true, .save_dirty_files = true,
   .cmd = { {"echo build: x64 & bin\\build.bat" , .os = "win"  },
            {"echo build: x64 & bin/build.sh", .os = "linux"},
            {"echo build: x64 & bin/build.sh", .os = "mac"  }, }, },
 
 { .name = "run one time",
   .out = "*run*", .footer_panel = false, .save_dirty_files = false,
   .cmd = { { "pushd ..\\build & one_time", .os = "win"   }, }, },
 
 { .name = "build C++ lexer generator",
   .out = "*compilation*", .footer_panel = true, .save_dirty_files = true,
   .cmd = { { "custom\\bin\\build_one_time 4coder_lex_gen_cpp.cpp ..\\build", .os = "win" }, }, },
 
 { .name = "build token tester",
   .out = "*compilation*", .footer_panel = true, .save_dirty_files = true,
   .cmd = { { "custom\\bin\\build_one_time languages\\4coder_lexer_cpp_test.cpp ..\\build", .os = "win" }, }, }
};

fkey_command[1] = "build x64";
fkey_command[4] = "run one time";
fkey_command[5] = "build C++ lexer generator";
fkey_command[6] = "build token tester";


